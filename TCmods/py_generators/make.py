import pathlib
import json

class tools:
    def s(sls):
        return str(sls).replace('[','').replace(']','').replace("'",'').replace(', ','')
def w(file,s=""):
    o=open(file,"w")
    o.writelines([s])
    o.close()
def r(file):
    o=open(file,"r")
    r=o.readlines()
    o.close()
    return r
def x(file,s=""):
    o=open(file,"x")
    o.writelines([s])
    o.close()
def X(file):
    pathlib.Path.mkdir(file)


class Data:
    __NAME__=''
    __description__=''
    __abc__={}
    class __defalts__:
        class recipe:
            sm="""
{
  "type": "minecraft:smelting",
  "category": "misc",
  "cookingtime": 60,
  "experience": 0.15,
  "ingredient": "<IN>",
  "result": {
    "count": 1,
    "id": "<out>"
  }
}
"""
            sl="""
{
  "type": "minecraft:crafting_shapeless",
  "ingredients": [
  ],
  "result": {
    "count": 1,
    "id": "<out>"
  }
}
"""
            sd="""
{
  "type": "minecraft:crafting_shaped",
  "key": {
    "a": "<a>",
    "b": "<b>",
    "c": "<c>",
    "d": "<d>",
    "e": "<e>",
    "f": "<f>",
    "g": "<g>",
    "h": "<h>",
    "i": "<i>"
  },
  "pattern": [
  ],
  "result": {
    "count": 1,
    "id": "<out>"
  }
}
"""
        pack="""{
  "pack": {
    "description": "<description>",
    "pack_format": 81
  }
}
"""
    def pack(name,namespace='minecraft',description='generated by LDmake.py'):
        Data.__abc__[namespace]={'smelting':{},'shaples':{},'shaped':{}}
        Data.__NAME__=name
        Data.__description__=description
    def add_namespace(namespace):
        Data.__abc__[namespace]={'smelting':{},'shaples':{},'shaped':{}}
    class recipe:
        class smelting:
            def add(namespace,name,IN,out,cont=1):
                Data.__abc__[namespace]['smelting'][name]={'IN':'air','out':'air','cont':'1'}
                Data.__abc__[namespace]['smelting'][name]['IN']=IN
                Data.__abc__[namespace]['smelting'][name]['out']=out
                Data.__abc__[namespace]['smelting'][name]['cont']=cont
        class shaples:
            def add(namespace,name,ins,out,cont=1):
                Data.__abc__[namespace]['shaples'][name]={'ins':['air'],'out':'air','cont':'1'}
                Data.__abc__[namespace]['shaples'][name]['ins']=ins
                Data.__abc__[namespace]['shaples'][name]['out']=out
                Data.__abc__[namespace]['shaples'][name]['cont']=cont
        class shaped:
            def add(namespace,name,ins,out,cont=1):
                Data.__abc__[namespace]['shaped'][name]={'ins':['air'],'out':'air','cont':'1'}
                Data.__abc__[namespace]['shaped'][name]['ins']=ins
                Data.__abc__[namespace]['shaped'][name]['out']=out
                Data.__abc__[namespace]['shaped'][name]['cont']=cont
    def build():
        data=Data.__abc__
        des=Data.__description__
        NAME=Data.__NAME__
        pack=Data.__defalts__.pack.replace('<description>',des)
        X(NAME)
        x(NAME+'/pack.mcmeta',pack)
        for NS in list(data.keys()):
            X(NAME+'/data')
            X(NAME+'/data/'+NS)
            X(NAME+'/data/'+NS+'/recipe')
            sm=data[NS]['smelting']#    {'dirt': {'IN': 'air', 'out': 'air'}}
            sl=data[NS]['shaples']#     {'NAME': {'ins': ['air'], 'out': 'air'}}
            sd=data[NS]['shaped']#      {'LD': {'ins': ['air'], 'out': 'air'}
            for i in sm.keys():
                x(NAME+'/data/'+NS+'/recipe/'+i+'.json',Data.__defalts__.recipe.sm.replace('<IN>',sm[i]['IN']).replace('<out>',sm[i]['out']))
            for i in sl.keys():
                r=Data.__defalts__.recipe.sl
                #while len(sl[i]['ins'])<9:
                #    sl[i]['ins'].append('air')
                IZ=sl[i]['ins']
                x(NAME+'/data/'+NS+'/recipe/'+i+'.json',Data.__defalts__.recipe.sl.replace('<out>',sl[i]['out']))
                r=json.load(open(NAME+'/data/'+NS+'/recipe/'+i+'.json'))
                r['ingredients']=IZ
                r['result']['count']=sl[i]['cont']
                json.dump(r,open(NAME+'/data/'+NS+'/recipe/'+i+'.json',"w"))
            for i in sd.keys():
                #r=Data.__defalts__.recipe.sd
                #while len(sd[i]['ins'])<9:
                #    sd[i]['ins'].append('air')
                IZ=sd[i]['ins']
                x(NAME+'/data/'+NS+'/recipe/'+i+'.json',Data.__defalts__.recipe.sd.replace('<out>',sd[i]['out']))
                r=json.load(open(NAME+'/data/'+NS+'/recipe/'+i+'.json'))
                r['key']={}
                r['result']['count']=sd[i]['cont']
                XZ=["a","b","c","d","e","f","g","h","i"]
                for xi in range(len(IZ)):
                    r['key'][XZ[xi]]=IZ[xi]
                jz=list(r['key'].keys())
                if len(jz)<=3:
                    jZ=[]
                    jZ.append(jz)
                if len(jz)>3:
                    jZ=[[jz[0],jz[1],jz[2]]]
                    jZ.append(jz[3:])
                if len(jz)>6:
                    jZ=[[jz[0],jz[1],jz[2]],[jz[3],jz[4],jz[5]]]
                    jZ.append(jz[6:])
                if len(jz)==9:
                    jZ=[[jz[0],jz[1],jz[2]],[jz[3],jz[4],jz[5]],[jz[6],jz[7],jz[8]]]
                zj=[]
                for fi in jZ:
                    fi=tools.s(fi)
                    while len(fi)<3:
                        fi=fi+' '
                    zj.append(fi)
                jZ=zj
                r["pattern"]=jZ
                json.dump(r,open(NAME+'/data/'+NS+'/recipe/'+i+'.json',"w"))
            

            


def test():
    Data.pack('test','ns','testing')
    Data.recipe.shaples.add('ns','sticks',['stick','stick','stick','stick'],'dirt',10)
    Data.build()

test()
